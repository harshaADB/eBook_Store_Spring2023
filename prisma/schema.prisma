datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String        @unique
  passwordHash String
  transactions Transaction[]
  role         Role          @default(USER)
  payments     Payment[]
}

model Media {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  rentPerDay     Float
  type           MediaType
  transactions   Transaction[]
  link           String
  category       String[]
  shareableLinks Link[]

  @@unique([title, type])
}

model Transaction {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  borrowedAt    DateTime
  returnedAt    DateTime?
  link          Link?
  amount        Float
  paid          Float         @default(0)
  paymentStatus PaymentStatus @default(UNPAID)
  payment       Payment?

  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String @db.ObjectId
}

model Link {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique @default(cuid())

  media         Media       @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId       String      @db.ObjectId
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String      @unique @db.ObjectId
  expired       Boolean     @default(false)

  @@unique([mediaId, transactionId])
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  createdAt DateTime      @default(now())
  method    PaymentMethod
  status    PaymentStatus

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String      @unique @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String      @db.ObjectId
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum PaymentMethod {
  DEBIT_CARD
  CREDIT_CARD
}

enum MediaType {
  BOOK
}

enum Role {
  ADMIN
  USER
}
